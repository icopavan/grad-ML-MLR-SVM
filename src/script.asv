%%=========================================================================% Course : Machine Learning CSE 574% Project: PROJECT 3 -- One Vs. Other classifiers% Authors: %           ANGAD GADRE%           HARISH MANGALAMPALLI%           RAJARAM RABINDRANATH%%=========================================================================clearvars;clc;[train_data, train_label, validation_data, validation_label, test_data, test_label] = preprocess();save('dataset.mat', 'train_data', 'train_label', 'validation_data', 'validation_label', 'test_data', 'test_label');load('dataset.mat');%% labeling -- creating consolidated labelsn_class = 10;T = zeros(size(train_label, 1), n_class);for i = 1 : n_class    T(:, i) = (train_label == i);end%% ================ LOGISTIC REGRESSION ===================================%               Gradient descent method%%=========================================================================%%done with the 50K datasetoptions = optimset('MaxIter', 200);W = zeros(size(train_data, 2) + 1, n_class);%%(D+1)x1 matrix of zerosinitialWeights = zeros(size(train_data, 2) + 1, 1); start_blr = cputime;for i = 1 : n_class    objFunction = @(params) blrObjFunction(params, train_data, T(:, i));    [w, ~] = fmincg(objFunction, initialWeights, options);    W(:,i) = w;endtimeTaken_blr = cputime - start_blr;timeTaken_blrpredicted_label = blrPredict(W, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = blrPredict(W, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = blrPredict(W, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%save the result:W_blr = W;%% ================ LOGISTIC REGRESSION ===================================%                       NEWTON RAPHSON%  ========================================================================% (extra credits)% (un-comment this block of code to run)% done with the 50K dataset  W = zeros(size(train_data, 2) + 1, n_class); initialWeights = zeros(size(train_data, 2) + 1, 1); n_iter = 5;  start_blr_nr = cputime; for i = 1 : n_class     W(:, i) = blrNewtonRaphsonLearn(initialWeights, train_data, T(:, i), n_iter); end timeTaken_blr_nr = cputime - start_blr_nr; timeTaken_blr_nr predicted_label = blrPredict(W, train_data); fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);  predicted_label = blrPredict(W, validation_data); fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);  predicted_label = blrPredict(W, test_data); fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100); %%save the result: W_blr_newtonRaphson = W; %% ================ MULTI-CLASS LOGISTIC ==================================%                    GRADIENT DESCENT%%=========================================================================% (extra credits)% (un-comment this block of code to run)% done with the 50K dataset options = optimset('MaxIter', 200); initialWeights = zeros((size(train_data, 2) + 1) * n_class, 1);   objFunction = @(params) mlrObjFunction(params, train_data, T);  start_mlr = cputime; [W, cost] = fmincg(objFunction, initialWeights, options); timeTaken_mlr = cputime-start_mlr; timeTaken_mlr W = reshape(W, size(train_data, 2) + 1, n_class);     predicted_label = mlrPredict(W, train_data); fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);  predicted_label = mlrPredict(W, validation_data); fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);  predicted_label = mlrPredict(W, test_data); fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100); %%save result W_mlr=W; %% ================ MULTICLASS LOGISTICS REGRESSION =======================%                           NEWTON - RAPHSON% =========================================================================% (extra credits)% (un-comment this block of code to run)initialWeights = zeros((size(train_data, 2) + 1) * n_class, 1);n_iter = 2;start_mlr_nr = cputime;[W] = mlrNewtonRaphsonLearn(initialWeights, train_data, T, n_iter);timeTaken_mlr_nr = cputime - start_mlr_nr;timeTaken_mlr_nrsize(W)weight = reshape(W, size(train_data, 2) + 1, size(T, 2)); size(weight)predicted_label = mlrPredict(weight, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = mlrPredict(weight, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = mlrPredict(weight, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%save resultW_mlr_newtonRaphson_2 = weight;W_mlr_newtonRaphson = weight;%% =========================== SVM ========================================%                           % =========================================================================% Using linear kernel (all other parameters are kept default).Using linear kernel (all other parameters are kept default).model = svmtrain(train_label, train_data, '-t 0');[~ , train_accuracy , ~ ] = svmpredict (train_label, train_data , model);% fprintf('\nTraining Set Accuracy: %f\n', train_accuracy);[~ , validation_accuracy , ~ ] = svmpredict (validation_label, validation_data , model);% fprintf('\nValidation Set Accuracy: %f\n', validation_accuracy);[~ , test_accuracy , ~ ] = svmpredict (test_label, test_data , model);% fprintf('\nTest Set Accuracy: %f\n', test_accuracy);% Using radial basis function with value of gamma setting to 1 (all other parameters are kept default).model = svmtrain(train_label, train_data, '-t 2 -g 1');[~ , train_accuracy , ~ ] = svmpredict (train_label, train_data , model);% fprintf('\nTraining Set Accuracy: %f\n', train_accuracy);[~ , validation_accuracy , ~ ] = svmpredict (validation_label, validation_data , model);% fprintf('\nValidation Set Accuracy: %f\n', validation_accuracy);[~ , test_accuracy , ~ ] = svmpredict (test_label, test_data , model);% fprintf('\nTest Set Accuracy: %f\n', test_accuracy);% Using radial basis function with value of gamma setting to default (all other parameters are kept default).model = svmtrain(train_label, train_data, '-t 2');[~ , train_accuracy , ~ ] = svmpredict (train_label, train_data , model);% fprintf('\nTraining Set Accuracy: %f\n', train_accuracy);[~ , validation_accuracy , ~ ] = svmpredict (validation_label, validation_data , model);% fprintf('\nValidation Set Accuracy: %f\n', validation_accuracy);[~ , test_accuracy , ~ ] = svmpredict (test_label, test_data , model);% fprintf('\nTest Set Accuracy: %f\n', test_accuracy);% Using radial basis function with value of gamma setting to default and varying value of C (1; 10; 20; 30; ... ; 100) % and plot the graph of accuracy with respect to values of C in the report.C = [1,10:10:100];train_accuracies = zeros(size(C));validation_accuracies = zeros(size(C));test_accuracies = zeros(size(C));for i=C    model = svmtrain(train_label, train_data, strcat('-t 2 -c ', i));    [~ , train_accuracy , ~ ] = svmpredict (train_label, train_data , model);    fprintf('\nTraining Set Accuracy: %f\n', train_accuracy);    train_accuracies(C==i) = train_accuracy;    [~ , validation_accuracy , ~ ] = svmpredict (validation_label, validation_data , model);    fprintf('\nValidation Set Accuracy: %f\n', validation_accuracy);    validation_accuracies(C==i) = validation_accuracy;    [~ , test_accuracy , ~ ] = svmpredict (test_label, test_data , model);    fprintf('\nTest Set Accuracy: %f\n', test_accuracy);    test_accuracies(C==i) = test_accuracy;endload('p')load('dataset.mat')clearvarsload('params.mat')load('params_svm_1.mat')load('models.mat')model_linear = model;load('params.mat')W_mlr_newtonRaphson = W_mlr_newtonRaphson_2;%% save all the results:save('params_extra.mat', 'W_blr', 'W_blr_newtonRaphson', 'W_mlr',...'W_mlr_newtonRaphson','W_mlr_newtonRaphson_3','W_mlr_newtonRaphson_2',...'timeTaken_blr','timeTaken_blr_nr','timeTaken_mlr','timeTaken_mlr_nr',...'model_linear','model_rbf_C','model_rbf_1','model_rbf_default');save('params.mat', 'W_blr', 'W_blr_newtonRaphson', 'W_mlr',...'W_mlr_newtonRaphson','timeTaken_blr','timeTaken_blr_nr','timeTaken_mlr','timeTaken_mlr_nr',...'model_linear','model_rbf_C','model_rbf_1','model_rbf_default');